#! /usr/bin/env python

import asyncio
import datetime
import html
import http.client
import json
import pathlib
import re
import subprocess
import sys


def make_request(host, path, headers=None):
    if headers is None:
        headers = {}

    headers = headers | {"host": host}
    connection = http.client.HTTPSConnection(host)
    connection.request("GET", path, headers=headers)
    response = connection.getresponse()
    data = response.read().decode()
    connection.close()
    return data


class Block:
    def __init__(self, interval: int = 30) -> None:
        self.interval = interval
        self.data = {}
        self.alert = False

    async def config(self):
        """Override this method in subclasses for specific behavior."""
        pass

    async def update(self):
        """Override this method in subclasses for specific behavior."""
        pass

    async def run(self):
        """Runs the update method periodically forever."""
        await self.config()
        while True:
            try:
                await self.update()
                await asyncio.sleep(self.interval)
            except Exception as e:
                subprocess.run(["notify-send", str(e)])

    def get_name(self) -> str:
        return self.__class__.__name__.lower().replace("block", "")

    def set_data(self, title: str, value: str, value_gray=False, min_width=None) -> None:
        text = f"<b><span font_stretch='ultraexpanded' foreground='#046E8F'>{title}</span></b> "
        text += f"<span foreground='#91A3B0'>{value}</span>" if value_gray else f"{value}"
        full_text= text
        short_text= text
        self.data = {
            "full_text": full_text,
            "short_text": short_text,
            "markup": "pango",
            "name": self.get_name(),
        }
        if min_width:
            self.data["min_width"] = min_width

    async def click(self, data: dict) -> None:
        pass

    def notify(self, title: str, text: str) -> None:
        subprocess.run(["notify-send", title, text])


class DateBlock(Block):
    async def update(self) -> None:
        value = datetime.datetime.now().isoformat(sep=" ", timespec="seconds")
        self.set_data("DATE", value)


class NetworkBlock(Block):
    def __init__(self, interface: str, interval: int = 30):
        self.interface = interface
        super().__init__(interval)

    async def update(self):
        process = subprocess.run("nmcli c show --active".split(), capture_output=True)
        for net in process.stdout.decode().split("\n")[1:]:
            if net and net.split()[3].upper() == self.interface.upper():
                self.set_data(net.split()[3].upper(), net.split()[0])
                break
        else:
            self.data = {}

    async def click(self, data: dict) -> None:
        if data["button"] == 1:
            process = subprocess.run(f"nmcli -g IP4.ADDRESS device show {self.interface}".split(), capture_output=True)
            value = process.stdout.decode().split()[0]
            subprocess.run(["notify-send", self.interface, value])

        if data["button"] == 3:
            subprocess.run(f"nmcli device down {self.interface}".split())


class BatteryBlock(Block):
    async def config(self) -> None:
        path = pathlib.Path("/sys/class/power_supply/BAT0/charge_full")
        self._prefix_file = "energy"
        if path.exists():
            self._prefix_file = "charge"

    async def update(self) -> None:
        with open(f"/sys/class/power_supply/BAT0/{self._prefix_file}_full", "r") as f:
            battery_full = int(f.read().strip())

        with open(f"/sys/class/power_supply/BAT0/{self._prefix_file}_now", "r") as f:
            battery_now = int(f.read().strip())

        with open("/sys/class/power_supply/BAT0/status", "r") as f:
            battery_status = f.read().strip()

        power = int(battery_now * 100 / battery_full)
        status = ""
        if battery_status == "Charging":
            status = "+"

        self.set_data("BAT", f"{status}{power}%")
        if power < 15 and battery_status == "Discharging":
            self.alert = True
        else:
            self.alert = False


class CpuBlock(Block):
    async def update(self) -> None:
        process = subprocess.run("vmstat 1 2".split(), capture_output=True)
        value = 100 - int(process.stdout.decode().split("\n")[3].split()[14])
        self.set_data("CPU", f"{value}%", min_width="CPU 10%")


class MemoryBlock(Block):
    async def update(self) -> None:
        process = subprocess.run("free".split(), capture_output=True)
        line = process.stdout.decode().split("\n")[1].split()
        value = int(int(line[2]) * 100 / int(line[1]))
        self.set_data("MEM", f"{value}%")


class DiskBlock(Block):
    async def update(self) -> None:
        process = subprocess.run("df".split(), capture_output=True)
        lines = process.stdout.decode().split("\n")[1:]
        for line in lines:
            if line.split()[-1] == "/":
                value = line.split()[-2]
                self.set_data("DISK", f"{value}")
                break


class VolumeBlock(Block):
    async def update(self) -> None:
        process = subprocess.run("pactl get-sink-mute @DEFAULT_SINK@".split(), capture_output=True)
        if process.stdout.decode().split()[-1] == "yes":
            self.set_data("VOL", f"muted", value_gray=True)
            return

        process = subprocess.run("pactl get-sink-volume @DEFAULT_SINK@".split(), capture_output=True)
        try:
            value = max([int(x.replace("%", "")) for x in process.stdout.decode().split("\n")[0].split()[4:12:7]])
            self.set_data("VOL", f"{value}%")
        except:
            pass

    async def click(self, data: dict) -> None:
        cmd = ""
        if data["button"] == 1:
            cmd = "pactl set-sink-volume @DEFAULT_SINK@ +5%"
        elif data["button"] == 2:
            cmd = "pactl set-sink-mute @DEFAULT_SINK@ toggle"
        elif data["button"] == 3:
            cmd = "pactl set-sink-volume @DEFAULT_SINK@ -5%"

        subprocess.run(cmd.split())
        await self.update()


class CpuTempBlock(Block):
    async def update(self) -> None:
        p = pathlib.Path("/sys/devices/platform/coretemp.0/hwmon") 
        value = int(int(list(p.walk())[1][0].joinpath("temp1_input").open().read().strip()) / 1000)
        self.set_data("TEMP", f"{value}Â°C")


class WeatherBlock(Block):
    async def update(self) -> None:
        host = "www.buienalarm.nl"
        path = "/nederland/amsterdam/5576"
        loop = asyncio.get_running_loop()
        try:
            data = await loop.run_in_executor(None, make_request, host, path)
            temp = re.findall("<span class=\"text-secondary font-semibold text-6xl inline-block\">([^<]+)</span>", data)[0]
            temp = html.unescape(temp)
            rain = re.findall("<span class=\"text-md\">([^<]+)</span>", data)[1]
            self.set_data("AMS", f"{temp}C {rain}mm".replace(",", "."))
        except:
            self.set_data("AMS", "-", value_gray=True)


class EuroBlock(Block):
    async def update(self) -> None:
        host = "wise.com"
        path = "/br/currency-converter/eur-to-brl-rate"
        headers = {"User-Agent": "curl/7.81.0", "Accept": "*/*"}
        loop = asyncio.get_running_loop()
        try:
            data = await loop.run_in_executor(None, make_request, host, path, headers)
            value = re.findall("<span class=\"text-success\">([^<]+)</span>", data)[0]
            self.set_data("EURO", value.replace(",", "."))
        except:
            self.set_data("EURO", "-", value_gray=True)


class UpdateBlock(Block):
    async def update(self) -> None:
        process = subprocess.run("pacman -Qu".split(), capture_output=True)
        value = int(process.stdout.decode().count("\n"))
        if value > 0:
            self.set_data("PKG", str(value))



class AlertBlock(Block):
    def __init__(self, interval: int, bar_instance) -> None:
        super().__init__(interval)
        self.bar_instance = bar_instance

    def set_alert_format(self, alert: str) -> str:
        return f"<span font_stretch='ultraexpanded' background='#046E8F'> {alert} </span>"

    async def update(self) -> None:
        full_text = ""

        battery = self.bar_instance.get_block("battery")
        if battery.alert is True:
            full_text += self.set_alert_format("BATTERY")

        p = subprocess.run(["lsof"] + [str(x) for x in pathlib.Path("/dev/").iterdir() if x.name.startswith("video")], capture_output=True)
        if p.stdout:
            full_text += self.set_alert_format("CAMERA")

        self.data = {
            "full_text": full_text,
            "markup": "pango",
            "name": self.get_name(),
            "align": "left",
        }


class Writer:
    def print_line(self, txt: str):
        self._print(txt)

    def print_text(self, txt: str):
        self._print(txt, end="")

    def _print(self, txt: str, end="\n") -> None:
        sys.stdout.write(txt + end)
        sys.stdout.flush()


class Bar:
    def __init__(self, writer: Writer) -> None:
        self.writer = writer
        self.block_list = []
        self.headers = {"version": 1, "click_events": True}

    def add_block(self, block: Block) -> None:
        self.block_list.append(block)

    def start(self):
        self.writer.print_line(json.dumps(self.headers))
        self.writer.print_line("[")

    def get_block(self, name: str) -> Block | None:
        for block in self.block_list:
            if block.__class__.__name__.lower().replace("block", "") == name:
                return block

    async def input(self):
        while True:
            line = await asyncio.to_thread(input)
            if line == "[":
                continue

            if line[0] == ",":
                line = line[1:]

            try:
                data = json.loads(line)
                block = self.get_block(data["name"])
                if block is not None:
                    await block.click(data)
            except Exception as e:
                subprocess.run(["notify-send", str(e)])

    async def update(self):
        while True:
            block_update_list = []
            for block in self.block_list:
                if block.data:
                    block_update_list.insert(0, block.data)

            self.writer.print_line(json.dumps(block_update_list) + ",")
            await asyncio.sleep(1)


async def main():
    w = Writer()
    bar = Bar(w)
    bar.add_block(DateBlock(1))
    bar.add_block(NetworkBlock("{{ config.wlan_interface }}", 3))
    bar.add_block(NetworkBlock("{{ config.eth_interface }}", 3))
    bar.add_block(BatteryBlock(2))
    bar.add_block(CpuBlock(3))
    bar.add_block(MemoryBlock(3))
    bar.add_block(DiskBlock(3))
    bar.add_block(VolumeBlock(2))
    bar.add_block(CpuTempBlock(3))
    bar.add_block(WeatherBlock(180))
    bar.add_block(UpdateBlock(300))
{% if config.euro %}
    bar.add_block(EuroBlock(300))
{% endif %}
    bar.add_block(AlertBlock(1, bar))

    bar.start()
    tasks = [asyncio.create_task(obj.run()) for obj in bar.block_list]
    await asyncio.gather(*tasks, asyncio.create_task(bar.update()), asyncio.create_task(bar.input()))


if __name__ == "__main__":
    asyncio.run(main())
